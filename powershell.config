Clear-Host  # Clears the PowerShell console window

function Show-WelcomeMessage {
    $asciiArt = @"
 _______________________________________________________________________
|[] PowerShell                                                    |F]|!"|
|"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""|"|
|12.Workbench:> cd itz:asc                                            | |
|12.Work:Iltzu/Asc> ed shell01.asc                                    | |
|                                                                     | |
|                                                                     |_|
|_____________________________________________________________________|/|
"@

    # Using color scheme index 6 for Welcome Message
    Write-Host $asciiArt -ForegroundColor DarkCyan
    # Using color scheme index 3 for "Welcome to PowerShell!"
    Write-Host "Welcome to PowerShell!" -ForegroundColor Green
}

# Call the function to display the welcome message
Show-WelcomeMessage

function Custom-LS {
    param(
        [string]$Path = ".",
        [switch]$Recurse
    )

    $esc = [char]27 # Correct way to represent the ESC character in PowerShell

    Get-ChildItem -Path $Path -Recurse:$Recurse | ForEach-Object {
        $color = ""
        if ($_.PSIsContainer) {
            # Using color scheme index 1 for directories
            $color = "${esc}[38;2;254;132;156m"
        } elseif ($_.Extension -eq ".exe") {
            # Using color scheme index 3 for executables
            $color = "${esc}[38;2;189;239;132m"
        } elseif ($_.Extension -eq ".txt" -or $_.Extension -eq ".ps1") {
            # Using color scheme index 5 for text and script files
            $color = "${esc}[38;2;250;171;112m"
        } elseif ($_.Extension -eq ".pdf") {
            # Using color scheme index 7 for PDF documents
            $color = "${esc}[38;2;38;186;217m"
        } else {
            # Using color scheme index 10 for other file types
            $color = "${esc}[38;2;173;177;205m"
        }

        $reset = "${esc}[0m"
        $item = "{0}{1}{2}" -f $color, $_.Name, $reset
        Write-Host $item -NoNewline
        Write-Host '' # Add a newline after each item
    }
}

# Overwrite the 'ls' alias with the Custom-LS function
Remove-Item Alias:ls -Force
Set-Alias -Name ls -Value Custom-LS

# Set up the initial location and aliases
# $desktopPath = Join-Path $home 'Onedrive\Desktop'
# Set-Location $desktopPath
Set-Alias -Name py3 -Value python

# Define the prompt function
function Prompt {
  $esc = [char]27 # ESC character for ANSI escape sequences
  $reset = "${esc}[0m" # Reset formatting

  # Define colors and styles for each part
  $squishtermColor = "${esc}[38;2;74;81;111m" # Using color scheme index 1
  $emojiColor = "${esc}[38;2;193;162;245m" # Using color scheme index 7
  $promptSymbolColor = "${esc}[38;2;20;189;213m" # Using color scheme index 9
  $pathColor = "${esc}[38;2;135;174;254m" # Using color scheme index 6
  $currentDirColor = "${esc}[38;2;189;239;132m" # Using color scheme index 3


  # Define a list of rocket emojis to cycle through
  $rocketEmojis = 'ðŸš€', 'ðŸ›¸', 'ðŸ’«', 'âœ¨'
  $index = [Math]::Floor([DateTime]::Now.Ticks / 10000000) % $rocketEmojis.Length
  $currentEmoji = $rocketEmojis[$index]

  # Split the path to highlight the current directory differently
  $path = (Get-Location).Path
  $parentPath = $path | Split-Path -Parent
  $currentDir = Split-Path -Leaf $path

  # Construct the first line with "Squishterm" and cycling rocket emoji in bold (bright) color
  $firstLine = "${squishtermColor}Squishterm${reset} ${emojiColor}$currentEmoji ${promptSymbolColor}>${reset}"

  # Construct the second line with highlighted current directory and prepend spaces for alignment
  # Adjust the number of spaces as needed to achieve the desired indentation
  $indentation = "  " # Two spaces for indentation, adjust as necessary
  $secondLine = "${indentation}${pathColor}$parentPath${reset}${currentDirColor}\$currentDir${reset}"

  # Return the two lines
  "$firstLine`n$secondLine "
}

function Show-Heart {
    $esc = [char]27 # ANSI escape character

# Define the colors for the rainbow
$colors = @(
    "${esc}[38;2;255;0;0m",    # Red
    "${esc}[38;2;255;127;0m",  # Orange
    "${esc}[38;2;255;255;0m",  # Yellow
    "${esc}[38;2;0;255;0m",    # Green
    "${esc}[38;2;0;0;255m",    # Blue
    "${esc}[38;2;75;0;130m",   # Indigo
    "${esc}[38;2;148;0;211m"   # Violet
)

# Each line of ASCII art
$asciiArtLines = @(
"     __     ",
"   >(o)    ",
"    /\     ",
"  -(__)-   ",
" /\ | /\  ",
"<__\|/__> ",
"  | | | |  ",
"  | | | |  ",
"  \_|_|_/  ",
"   \ | /   ",
"    \ /    ",
"     '     "
)

# Get the terminal window width
$windowWidth = $Host.UI.RawUI.WindowSize.Width

# Loop through each line and apply the colors in a rainbow pattern, centering each line
foreach ($line in $asciiArtLines) {
    # Calculate the color index based on the current line index
    $colorIndex = $i % $colors.Length
    $i++

    # Get the color code from the colors array
    $colorCode = $colors[$colorIndex]

    # Calculate left padding to center the line
    $lineLength = $line.Length
    $padding = ($windowWidth - $lineLength) / 2

    # Ensure padding is not negative for smaller windows
    if ($padding -lt 0) {
        $padding = 0
    }

    # Create padding string with spaces
    $paddingString = " " * [Math]::Floor($padding)

    # Print the line with the selected color code, centered
    Write-Host "$paddingString$colorCode$line$([char]27)[0m" -NoNewline

    # Reset the color to default after each line
    Write-Host "" # This creates a new line
}

}


# Define the Clear-And-Show-Heart function
function Clear-And-Show-Heart {
    Clear-Host  # Clears the PowerShell console window
    # After showing heart, force a redraw of the prompt.
    Show-Heart
}

Set-Alias -Name c -Value Clear-And-Show-Heart
