Clear-Host  # Clears the PowerShell console window

function Show-WelcomeMessage {
    $asciiArt = @"
 _______________________________________________________________________
|[] AmigaShell                                                    |F]|!"|
|"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""|"|
|12.Workbench:> cd itz:asc                                            | |
|12.Work:Iltzu/Asc> ed shell01.asc                                    | |
|                                                                     | |
|                                                                     |_|
|_____________________________________________________________________|/|
"@

    Write-Host $asciiArt -ForegroundColor Cyan
    Write-Host "Welcome to PowerShell!" -ForegroundColor Green
}

# Call the function to display the welcome message
Show-WelcomeMessage

function Custom-LS {
    param(
        [string]$Path = ".",
        [switch]$Recurse
    )

    $esc = [char]27 # Correct way to represent the ESC character in PowerShell

    Get-ChildItem -Path $Path -Recurse:$Recurse | ForEach-Object {
        $color = ""
        if ($_.PSIsContainer) {
            $color = "${esc}[1;34m" # Bold Blue for directories
        } elseif ($_.Extension -eq ".exe") {
            $color = "${esc}[1;32m" # Bold Green for executables
        } elseif ($_.Extension -eq ".txt" -or $_.Extension -eq ".ps1") {
            $color = "${esc}[0;36m" # Cyan for text and script files
        } elseif ($_.Extension -eq ".pdf") {
            $color = "${esc}[0;31m" # Red for PDF documents
        } else {
            $color = "${esc}[0;37m" # Default (white) for other file types
        }

        $reset = "${esc}[0m"
        $item = "{0}{1}{2}" -f $color, $_.Name, $reset
        Write-Host $item -NoNewline
        Write-Host '' # Add a newline after each item
    }
}

# Overwrite the 'ls' alias with the Custom-LS function
Remove-Item Alias:ls -Force
Set-Alias -Name ls -Value Custom-LS



$desktopPath = Join-Path $home 'Onedrive\Desktop'
Import-Module PSReadLine
Set-Location $desktopPath
Set-Alias -Name py3 -Value python
Set-PSReadLineOption -PredictionSource History

function Prompt {
  $esc = [char]27 # ESC character for ANSI escape sequences
  $reset = "${esc}[0m" # Reset formatting

  # Define colors and styles for each part
  $squishtermColor = "${esc}[1;38;2;255;105;180m" # Bold (bright) hot pink for "Squishterm"
  $emojiColor = "${esc}[38;2;255;215;0m" # Gold for the rocket emoji
  $promptSymbolColor = "${esc}[38;2;0;255;255m" # Cyan for ">"
  $pathColor = "${esc}[38;2;173;216;230m" # Light blue for the path
  $currentDirColor = "${esc}[38;2;0;255;127m" # Spring green for the current directory

  # Define a list of rocket emojis to cycle through
  $rocketEmojis = 'ðŸš€', 'ðŸ›¸', 'ðŸ’«', 'âœ¨'
  $index = [Math]::Floor([DateTime]::Now.Ticks / 10000000) % $rocketEmojis.Length
  $currentEmoji = $rocketEmojis[$index]

  # Split the path to highlight the current directory differently
  $path = (Get-Location).Path
  $parentPath = $path | Split-Path -Parent
  $currentDir = Split-Path -Leaf $path

  # Construct the first line with "Squishterm" and cycling rocket emoji in bold (bright) color
  $firstLine = "${squishtermColor}Squishterm${reset} ${emojiColor}$currentEmoji ${promptSymbolColor}>${reset}"

  # Construct the second line with highlighted current directory and prepend spaces for alignment
  # Adjust the number of spaces as needed to achieve the desired indentation
  $indentation = "  " # Two spaces for indentation, adjust as necessary
  $secondLine = "${indentation}${pathColor}$parentPath${reset}${currentDirColor}\$currentDir${reset}"

  # Return the two lines
  "$firstLine`n$secondLine "
}


